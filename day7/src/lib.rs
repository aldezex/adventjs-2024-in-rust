/*
Â¡El grinch ðŸ‘¹ ha pasado por el taller de Santa Claus! Y menudo desastre ha montado. Ha cambiado el orden de algunos paquetes, por lo que los envÃ­os no se pueden realizar.

Por suerte, el elfo Pheralb ha detectado el patrÃ³n que ha seguido el grinch para desordenarlos. Nos ha escrito las reglas que debemos seguir para reordenar los paquetes. Las instrucciones que siguen son:

RecibirÃ¡s un string que contiene letras y parÃ©ntesis.
Cada vez que encuentres un par de parÃ©ntesis, debes voltear el contenido dentro de ellos.
Si hay parÃ©ntesis anidados, resuelve primero los mÃ¡s internos.
Devuelve el string resultante con los parÃ©ntesis eliminados, pero con el contenido volteado correctamente.
Nos ha dejado algunos ejemplos:

fixPackages('a(cb)de')
// âžž "abcde"
// Volteamos "cb" dentro de los parÃ©ntesis

fixPackages('a(bc(def)g)h')
// âžž "agdefcbh"
// 1Âº volteamos "def" â†’ "fed", luego volteamos "bcfedg" â†’ "gdefcb"

fixPackages('abc(def(gh)i)jk')
// âžž "abcighfedjk"
// 1Âº volteamos "gh" â†’ "hg", luego "defhgi" â†’ "ighfed"

fixPackages('a(b(c))e')
// âžž "acbe"
// 1Âº volteamos "c" â†’ "c", luego "bc" â†’ "cb"
*/
pub fn fix_packages(packages: &'static str) -> String {
    let re = regex::Regex::new(r"\(([^()]*)\)").unwrap();
    let mut result = String::from(packages);

    while let Some(caps) = re.captures(&result) {
        result = result.replacen(&caps[0], &caps[1].chars().rev().collect::<String>(), 1);
    }
    result
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_fix_packages() {
        assert_eq!(fix_packages("a(cb)de"), "abcde");
        assert_eq!(fix_packages("a(bc(def)g)h"), "agdefcbh");
        assert_eq!(fix_packages("abc(def(gh)i)jk"), "abcighfedjk");
        assert_eq!(fix_packages("a(b(c))e"), "acbe");
    }
}
